// 1- O que é uma exceção em Java e qual é o propósito de usá-las em programas?

Em Java, uma exceção é um evento anormal que ocorre durante a execução de um programa e que interrompe o fluxo normal de instruções. O propósito das exceções é lidar com situações imprevistas ou erros, permitindo que o programa trate esses problemas de maneira adequada.

// 2- Diferença entre exceções verificadas e não verificadas em Java:

Exceções Verificadas: São aquelas que o compilador obriga o programador a tratar ou lançar. Elas derivam da classe Exception, exceto RuntimeException e suas subclasses. Exemplo: IOException.
Exceções Não Verificadas: São aquelas que o compilador não obriga o programador a tratar ou lançar. Geralmente derivam de RuntimeException. Exemplo: NullPointerException.

// 3- Como lidar com exceções em Java:

Palavras-chave: try, catch, finally, throw, throws.
Práticas comuns incluem:
Usar blocos try-catch para capturar e tratar exceções.
Utilizar o bloco finally para código que deve ser executado independentemente de ocorrer uma exceção.
Lançar exceções com throw ou declará-las na assinatura do método com throws.

// 4- Bloco "try-catch" em Java:

O bloco try-catch é usado para lidar com exceções. O código propenso a exceções é colocado dentro do bloco try, e se ocorrer uma exceção, o bloco catch correspondente é executado para lidar com ela.

// 5- Criação de exceções personalizadas em Java:

É apropriado criar exceções personalizadas quando você encontra situações específicas para as quais as exceções padrão não são adequadas. Para criar uma exceção personalizada, você deve criar uma classe que estenda Exception ou uma de suas subclasses.
//Exemplo:
public class MinhaExcecaoPersonalizada extends Exception {
    public MinhaExcecaoPersonalizada(String mensagem) {
        super(mensagem);
    }
}

//Você poderia usá-la assim:
if (algumaCondicao) {
    throw new MinhaExcecaoPersonalizada("Esta é uma mensagem específica da exceção personalizada.");
}